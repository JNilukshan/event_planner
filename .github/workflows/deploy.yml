name: Deploy to VM

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install dependencies
      run: npm install

    - name: Build project
      run: npm run build

    - name: Deploy on VM
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.VM_HOST }}
        username: ${{ secrets.VM_USERNAME }}
        password: ${{ secrets.VM_PASSWORD }}
        script: |
          # Remove old files
          rm -rf /home/azureuser/event_planner/*
          mkdir -p /home/azureuser/event_planner
          
          # Install required packages
          if ! command -v serve &> /dev/null; then
            sudo npm install -g serve
          fi
          
          if ! command -v nginx &> /dev/null; then
            sudo apt update
            sudo apt install -y nginx
          fi
          
          # Stop any existing process
          pm2 stop event-planner 2>/dev/null || true
          pm2 delete event-planner 2>/dev/null || true

    - name: Copy build files to VM
      uses: appleboy/scp-action@v0.1.5
      with:
        host: ${{ secrets.VM_HOST }}
        username: ${{ secrets.VM_USERNAME }}
        password: ${{ secrets.VM_PASSWORD }}
        source: "dist/*"
        target: "/home/azureuser/event_planner/"
        strip_components: 1

    - name: Start application
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.VM_HOST }}
        username: ${{ secrets.VM_USERNAME }}
        password: ${{ secrets.VM_PASSWORD }}
        script: |
          # Check if files copied correctly
          ls -la /home/azureuser/event_planner/
          
          # Start the app serving the current directory
          cd /home/azureuser/event_planner
          pm2 start serve --name event-planner -- -s . -l 3000 --single
          pm2 save
          
          # Configure Nginx as reverse proxy
          sudo tee /etc/nginx/sites-available/event-planner > /dev/null << 'EOF'
          server {
              listen 80 default_server;
              listen [::]:80 default_server;
              
              server_name _;
              
              # Security headers
              add_header X-Frame-Options "SAMEORIGIN" always;
              add_header X-Content-Type-Options "nosniff" always;
              add_header X-XSS-Protection "1; mode=block" always;
              
              # Main React app
              location / {
                  proxy_pass http://localhost:3000;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  proxy_cache_bypass $http_upgrade;
                  
                  # Handle React Router (SPA)
                  try_files $uri $uri/ @fallback;
              }
              
              location @fallback {
                  proxy_pass http://localhost:3000;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  proxy_cache_bypass $http_upgrade;
              }
              
              # Static assets with caching
              location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
                  proxy_pass http://localhost:3000;
                  expires 1y;
                  add_header Cache-Control "public, immutable";
                  access_log off;
              }
              
              # Health check
              location /health {
                  access_log off;
                  return 200 "healthy\n";
                  add_header Content-Type text/plain;
              }
          }
          EOF
          
          # Enable the site and restart nginx
          sudo rm -f /etc/nginx/sites-enabled/default
          sudo ln -sf /etc/nginx/sites-available/event-planner /etc/nginx/sites-enabled/
          sudo nginx -t && sudo systemctl reload nginx
          sudo systemctl enable nginx
          
          echo "✅ App deployed successfully!"
          echo "📁 Files in directory:"
          ls -la /home/azureuser/event_planner/
          echo ""
          echo "🌐 Access your app:"
          echo "   HTTP:  http://$(curl -s ifconfig.me)"
          echo "   Direct: http://$(curl -s ifconfig.me):3000"
          echo ""
          echo "🔧 Services status:"
          pm2 list
          sudo systemctl status nginx --no-pager -l